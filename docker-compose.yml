services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      hftnet:
        aliases: [zookeeper]

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      hftnet:
        aliases: [kafka]

  # Hadoop Namenode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./data:/data
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HDFS_CONF_dfs_replication=1
    env_file:
      - ./hadoop.env
    networks:
      hftnet:
        aliases: [namenode]

  # Hadoop Datanode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HDFS_CONF_dfs_replication: 1
    ports:
      - "9864:9864"
    env_file:
      - ./hadoop.env
    networks:
      hftnet:
        aliases: [datanode]

  # Apache Spark Master
  spark-master:
    image: bitnami/spark:3.4.1-debian-11-r4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ./:/app
      - spark-logs:/opt/bitnami/spark/logs
    networks:
      hftnet:
        aliases: [spark-master]

  # Apache Spark Worker
  spark-worker:
    image: bitnami/spark:3.4.1-debian-11-r4
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8081:8081'
    volumes:
      - ./:/app
      - spark-logs:/opt/bitnami/spark/logs
    depends_on:
      - spark-master
    networks:
      hftnet:
        aliases: [spark-worker]

  # Additional Spark Worker to give batch jobs capacity

  # PostgreSQL for Airflow AND Analytics
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      hftnet:
        aliases: [postgres]

  # Redis for Airflow AND Trading Signals (HFT Cache)
  redis:
    image: redis:7.2-bookworm
    container_name: redis
    ports:
      - "6379:6379"  # Expose for trading system access
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      hftnet:
        aliases: [redis]

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    restart: unless-stopped
    command: webserver
    entrypoint: |
      bash -c "
      airflow db init &&
      airflow users create --username admin --firstname Peter --lastname Parker --role Admin --email spiderman@superhero.org --password admin &&
      airflow webserver
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'True'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '1800'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '5'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '10'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'dev-shared-secret-key'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      SPARK_APP_DIR: /app
      SPARK_BATCH_FILE: spark_batch.py
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./:/app
    ports:
      - "8082:8080"
    networks:
      hftnet:
        aliases: [airflow-webserver]

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    restart: unless-stopped
    command: scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'True'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '1800'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '5'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '10'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'dev-shared-secret-key'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      SPARK_APP_DIR: /app
      SPARK_BATCH_FILE: spark_batch.py
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./:/app
    networks:
      hftnet:
        aliases: [airflow-scheduler]

  # Airflow Worker
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-worker
    restart: unless-stopped
    command: celery worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'True'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '1800'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '5'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '10'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'dev-shared-secret-key'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      SPARK_APP_DIR: /app
      SPARK_BATCH_FILE: spark_batch.py
      SPARK_DRIVER_HOST: airflow-worker
      SPARK_DRIVER_BIND_ADDRESS: 0.0.0.0
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./:/app
    networks:
      hftnet:
        aliases: [airflow-worker]

  # Stock Data Producer (Real-time Market Data Feed)
  stock-producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: stock-producer
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379/0
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    volumes:
      - ./:/app
    restart: always
    networks:
      hftnet:
        aliases: [stock-producer]

  # Spark Streaming Job (Real-time Signal Generation)
  spark-streaming:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-streaming
    depends_on:
      - spark-master
      - kafka
      - namenode
      - redis
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - HDFS_NAMENODE=hdfs://namenode:9000
      - REDIS_URL=redis://redis:6379/1
      # Set to 1 to force a fresh checkpoint (will move old checkpoint aside)
      - FRESH_RUN=0
    volumes:
      - ./:/app
    # Limit streaming job to 1 core per executor to leave room for batch
    command:
      - spark-submit
      - --master
      - spark://spark-master:7077
      - --conf
      - spark.cores.max=1
      - --packages
      - org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0
      - /app/spark_streaming.py
    networks:
      hftnet:
        aliases: [spark-streaming]

  # Trading System (Executes trades based on signals)
  trading-system:
    build:
      context: .
      dockerfile: Dockerfile.trading
    container_name: trading-system
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_URL=redis://redis:6379/1
      - POSTGRES_URL=postgresql://airflow:airflow@postgres:5432/airflow
    volumes:
      - ./:/app
    restart: always
    command: ["python", "/app/trading_system.py"]
    networks:
      hftnet:
        aliases: [trading-system]

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  hadoop_namenode:
  hadoop_datanode:
  spark-logs:
  postgres-db-volume:
  redis-data:

networks:
  hftnet:
    driver: bridge
